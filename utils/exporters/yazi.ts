import type { ThemePalette, ExportResult } from '../types'

/**
 * Generates a Yazi file manager theme in TOML format
 * @param palette - Semantic color palette
 * @param themeName - Name of the theme
 * @returns Yazi theme.toml file content
 */
export function exportYazi(palette: ThemePalette, themeName: string = 'vulpes'): ExportResult {
  const content = `# ${themeName} - Yazi Theme
# Generated by vulpes-theme-lab

[manager]
cwd = { fg = "${palette.base}" }

# Hovered
hovered         = { fg = "${palette.bg}", bg = "${palette.base}" }
preview_hovered = { underline = true }

# Find
find_keyword  = { fg = "${palette.warning}", italic = true }
find_position = { fg = "${palette.info}", bg = "reset", italic = true }

# Marker
marker_selected = { fg = "${palette.success}", bg = "${palette.success}" }
marker_copied   = { fg = "${palette.warning}", bg = "${palette.warning}" }
marker_cut      = { fg = "${palette.error}", bg = "${palette.error}" }

# Tab
tab_active   = { fg = "${palette.bg}", bg = "${palette.base}" }
tab_inactive = { fg = "${palette.comment}", bg = "${palette.bg_alt}" }
tab_width    = 1

# Border
border_symbol = "â”‚"
border_style  = { fg = "${palette.bg_alt}" }

# Highlighting
syntect_theme = ""

[status]
separator_open  = ""
separator_close = ""
separator_style = { fg = "${palette.bg_alt}", bg = "${palette.bg_alt}" }

# Mode
mode_normal = { fg = "${palette.bg}", bg = "${palette.base}", bold = true }
mode_select = { fg = "${palette.bg}", bg = "${palette.success}", bold = true }
mode_unset  = { fg = "${palette.bg}", bg = "${palette.error}", bold = true }

# Progress
progress_label  = { fg = "${palette.fg}", bold = true }
progress_normal = { fg = "${palette.base}", bg = "${palette.bg_alt}" }
progress_error  = { fg = "${palette.error}", bg = "${palette.bg_alt}" }

# Permissions
permissions_t = { fg = "${palette.success}" }
permissions_r = { fg = "${palette.warning}" }
permissions_w = { fg = "${palette.error}" }
permissions_x = { fg = "${palette.info}" }
permissions_s = { fg = "${palette.comment}" }

[input]
border   = { fg = "${palette.base}" }
title    = {}
value    = {}
selected = { reversed = true }

[select]
border   = { fg = "${palette.base}" }
active   = { fg = "${palette.base}" }
inactive = {}

[tasks]
border  = { fg = "${palette.base}" }
title   = {}
hovered = { underline = true }

[which]
mask            = { bg = "${palette.bg_alt}" }
cand            = { fg = "${palette.base}" }
rest            = { fg = "${palette.comment}" }
desc            = { fg = "${palette.fg}" }
separator       = "  "
separator_style = { fg = "${palette.comment}" }

[help]
on      = { fg = "${palette.success}" }
exec    = { fg = "${palette.info}" }
desc    = { fg = "${palette.comment}" }
hovered = { bg = "${palette.bg_alt}", bold = true }
footer  = { fg = "${palette.comment}", bg = "${palette.bg_alt}" }

[filetype]

rules = [
\t# Images
\t{ mime = "image/*", fg = "${palette.info}" },

\t# Videos
\t{ mime = "video/*", fg = "${palette.warning}" },
\t{ mime = "audio/*", fg = "${palette.warning}" },

\t# Archives
\t{ mime = "application/zip",             fg = "${palette.error}" },
\t{ mime = "application/gzip",            fg = "${palette.error}" },
\t{ mime = "application/x-tar",           fg = "${palette.error}" },
\t{ mime = "application/x-bzip",          fg = "${palette.error}" },
\t{ mime = "application/x-bzip2",         fg = "${palette.error}" },
\t{ mime = "application/x-7z-compressed", fg = "${palette.error}" },
\t{ mime = "application/x-rar",           fg = "${palette.error}" },

\t# Documents
\t{ mime = "application/pdf", fg = "${palette.base}" },

\t# Fallback
\t{ name = "*", fg = "${palette.fg}" },
\t{ name = "*/", fg = "${palette.base}" }
]
`

  return {
    filename: 'theme.toml',
    content,
    format: 'yazi',
  }
}
