import type { ThemePalette, ExportResult } from '../types'

/**
 * Generates a comprehensive Neovim Lua colorscheme plugin
 * Includes 100+ highlight groups for maximum legibility across:
 * - Core Vim syntax
 * - TreeSitter (comprehensive language support)
 * - LSP (diagnostics + semantic tokens)
 * - Popular plugins (Telescope, nvim-cmp, gitsigns, etc.)
 *
 * @param palette - Semantic color palette
 * @param themeName - Name of the theme
 * @param options - Font style options (bold, italic, underline)
 * @returns Neovim Lua colorscheme file
 */
export function exportNeovim(
  palette: ThemePalette,
  themeName: string = 'vulpes',
  options: { boldKeywords?: boolean; italicComments?: boolean; boldFunctions?: boolean; italicStrings?: boolean; underlineErrors?: boolean } = {}
): ExportResult {
  const { boldKeywords, italicComments, boldFunctions, italicStrings, underlineErrors } = options

  // Build style helpers
  const bold = boldKeywords ? ', bold = true' : ''
  const italic = italicComments ? ', italic = true' : ''
  const fbold = boldFunctions ? ', bold = true' : ''
  const sitalic = italicStrings ? ', italic = true' : ''
  const underline = underlineErrors ? ', underline = true' : ''

  const content = `-- ${themeName} colorscheme
-- Generated by vulpes-theme-lab
-- Comprehensive highlight groups (100+) for maximum legibility

local M = {}

function M.setup()
  vim.cmd('hi clear')
  if vim.fn.exists('syntax_on') then
    vim.cmd('syntax reset')
  end

  vim.o.background = 'dark'
  vim.g.colors_name = '${themeName}'

  local colors = {
    bg = '${palette.bg}',
    bg_alt = '${palette.bg_alt}',
    fg = '${palette.fg}',
    base = '${palette.base}',

    error = '${palette.error}',
    warning = '${palette.warning}',
    success = '${palette.success}',
    info = '${palette.info}',
    hint = '${palette.hint}',

    comment = '${palette.comment}',
    keyword = '${palette.keyword}',
    string = '${palette.string}',
    number = '${palette.number}',
    boolean = '${palette.boolean}',
    func = '${palette.function}',
    const = '${palette.constant}',
    type = '${palette.type}',
    variable = '${palette.variable}',
    operator = '${palette.operator}',
    builtin = '${palette.builtin}',
    parameter = '${palette.parameter}',
    property = '${palette.property}',
    namespace = '${palette.namespace}',
    macro = '${palette.macro}',
    tag = '${palette.tag}',
    punctuation = '${palette.punctuation}',
    heading = '${palette.heading}',

    selection = '${palette.selection}',
    cursor = '${palette.cursor}',
    cursorline = '${palette.cursorline}',
  }

  local highlights = {
    -- ============================================================================
    -- EDITOR UI
    -- ============================================================================
    Normal = { fg = colors.fg, bg = colors.bg },
    NormalFloat = { fg = colors.fg, bg = colors.bg_alt },
    NormalNC = { fg = colors.fg, bg = colors.bg },
    FloatBorder = { fg = colors.base, bg = colors.bg_alt },
    FloatTitle = { fg = colors.base, bg = colors.bg_alt${bold} },

    Cursor = { fg = colors.bg, bg = colors.cursor },
    lCursor = { link = 'Cursor' },
    CursorIM = { link = 'Cursor' },
    TermCursor = { link = 'Cursor' },
    TermCursorNC = { fg = colors.bg, bg = colors.comment },

    CursorLine = { bg = colors.cursorline },
    CursorColumn = { bg = colors.cursorline },
    CursorLineNr = { fg = colors.base${bold} },
    LineNr = { fg = colors.comment },
    LineNrAbove = { fg = colors.comment },
    LineNrBelow = { fg = colors.comment },

    SignColumn = { bg = colors.bg },
    SignColumnSB = { link = 'SignColumn' },
    FoldColumn = { fg = colors.comment, bg = colors.bg },
    Folded = { fg = colors.comment, bg = colors.bg_alt },
    ColorColumn = { bg = colors.bg_alt },

    -- Selections & Search
    Visual = { bg = colors.selection },
    VisualNOS = { bg = colors.selection },
    Search = { fg = colors.bg, bg = colors.warning },
    IncSearch = { fg = colors.bg, bg = colors.base },
    CurSearch = { fg = colors.bg, bg = colors.base${bold} },
    Substitute = { fg = colors.bg, bg = colors.error },

    -- UI Elements
    Pmenu = { fg = colors.fg, bg = colors.bg_alt },
    PmenuSel = { fg = colors.bg, bg = colors.base },
    PmenuSbar = { bg = colors.bg_alt },
    PmenuThumb = { bg = colors.base },
    PmenuKind = { fg = colors.type, bg = colors.bg_alt },
    PmenuKindSel = { fg = colors.bg, bg = colors.type },
    PmenuExtra = { fg = colors.comment, bg = colors.bg_alt },
    PmenuExtraSel = { fg = colors.bg, bg = colors.comment },

    StatusLine = { fg = colors.fg, bg = colors.bg_alt },
    StatusLineNC = { fg = colors.comment, bg = colors.bg },
    WinBar = { fg = colors.fg, bg = colors.bg },
    WinBarNC = { fg = colors.comment, bg = colors.bg },

    TabLine = { fg = colors.comment, bg = colors.bg },
    TabLineFill = { bg = colors.bg },
    TabLineSel = { fg = colors.fg, bg = colors.bg_alt },

    VertSplit = { fg = colors.bg_alt },
    WinSeparator = { fg = colors.bg_alt },

    Title = { fg = colors.base${bold} },
    Directory = { fg = colors.info },
    Question = { fg = colors.success },
    MoreMsg = { fg = colors.success },
    ModeMsg = { fg = colors.base${bold} },
    WarningMsg = { fg = colors.warning },
    ErrorMsg = { fg = colors.error },

    Conceal = { fg = colors.comment },
    NonText = { fg = colors.comment },
    SpecialKey = { fg = colors.comment },
    Whitespace = { fg = colors.comment },
    EndOfBuffer = { fg = colors.bg },

    -- Spell checking
    SpellBad = { sp = colors.error, undercurl = true },
    SpellCap = { sp = colors.warning, undercurl = true },
    SpellLocal = { sp = colors.info, undercurl = true },
    SpellRare = { sp = colors.hint, undercurl = true },

    -- ============================================================================
    -- CORE SYNTAX HIGHLIGHTING
    -- ============================================================================
    Comment = { fg = colors.comment${italic} },
    SpecialComment = { fg = colors.comment${italic} },

    Constant = { fg = colors.const },
    String = { fg = colors.string${sitalic} },
    Character = { fg = colors.string },
    Number = { fg = colors.number },
    Boolean = { fg = colors.boolean },
    Float = { fg = colors.number },

    Identifier = { fg = colors.variable },
    Function = { fg = colors.func${fbold} },

    Statement = { fg = colors.keyword${bold} },
    Conditional = { fg = colors.keyword${bold} },
    Repeat = { fg = colors.keyword${bold} },
    Label = { fg = colors.keyword },
    Operator = { fg = colors.operator },
    Keyword = { fg = colors.keyword${bold} },
    Exception = { fg = colors.error },

    PreProc = { fg = colors.base },
    Include = { fg = colors.keyword },
    Define = { fg = colors.keyword },
    Macro = { fg = colors.macro },
    PreCondit = { fg = colors.keyword },

    Type = { fg = colors.type },
    StorageClass = { fg = colors.keyword },
    Structure = { fg = colors.type },
    Typedef = { fg = colors.type },

    Special = { fg = colors.base },
    SpecialChar = { fg = colors.base },
    Tag = { fg = colors.tag },
    Delimiter = { fg = colors.punctuation },
    Debug = { fg = colors.warning },

    Underlined = { underline = true },
    Bold = { bold = true },
    Italic = { italic = true },

    Ignore = { fg = colors.comment },
    Error = { fg = colors.error },
    Todo = { fg = colors.bg, bg = colors.warning${bold} },

    -- ============================================================================
    -- LSP DIAGNOSTICS
    -- ============================================================================
    DiagnosticError = { fg = colors.error },
    DiagnosticWarn = { fg = colors.warning },
    DiagnosticInfo = { fg = colors.info },
    DiagnosticHint = { fg = colors.hint },
    DiagnosticOk = { fg = colors.success },

    DiagnosticVirtualTextError = { fg = colors.error, bg = colors.bg },
    DiagnosticVirtualTextWarn = { fg = colors.warning, bg = colors.bg },
    DiagnosticVirtualTextInfo = { fg = colors.info, bg = colors.bg },
    DiagnosticVirtualTextHint = { fg = colors.hint, bg = colors.bg },

    DiagnosticUnderlineError = { sp = colors.error${underline} },
    DiagnosticUnderlineWarn = { sp = colors.warning, underline = true },
    DiagnosticUnderlineInfo = { sp = colors.info, underline = true },
    DiagnosticUnderlineHint = { sp = colors.hint, underline = true },

    DiagnosticFloatingError = { fg = colors.error, bg = colors.bg_alt },
    DiagnosticFloatingWarn = { fg = colors.warning, bg = colors.bg_alt },
    DiagnosticFloatingInfo = { fg = colors.info, bg = colors.bg_alt },
    DiagnosticFloatingHint = { fg = colors.hint, bg = colors.bg_alt },

    DiagnosticSignError = { fg = colors.error, bg = colors.bg },
    DiagnosticSignWarn = { fg = colors.warning, bg = colors.bg },
    DiagnosticSignInfo = { fg = colors.info, bg = colors.bg },
    DiagnosticSignHint = { fg = colors.hint, bg = colors.bg },

    -- LSP Semantic Token Groups
    ['@lsp.type.class'] = { link = 'Type' },
    ['@lsp.type.decorator'] = { link = 'Function' },
    ['@lsp.type.enum'] = { link = 'Type' },
    ['@lsp.type.enumMember'] = { link = 'Constant' },
    ['@lsp.type.function'] = { link = 'Function' },
    ['@lsp.type.interface'] = { link = 'Type' },
    ['@lsp.type.macro'] = { link = 'Macro' },
    ['@lsp.type.method'] = { link = 'Function' },
    ['@lsp.type.namespace'] = { fg = colors.namespace },
    ['@lsp.type.parameter'] = { fg = colors.parameter },
    ['@lsp.type.property'] = { fg = colors.property },
    ['@lsp.type.struct'] = { link = 'Type' },
    ['@lsp.type.type'] = { link = 'Type' },
    ['@lsp.type.typeParameter'] = { link = 'Type' },
    ['@lsp.type.variable'] = { link = '@variable' },

    -- ============================================================================
    -- TREESITTER - COMPREHENSIVE LANGUAGE SUPPORT
    -- ============================================================================

    -- Comments
    ['@comment'] = { link = 'Comment' },
    ['@comment.documentation'] = { fg = colors.comment${italic} },
    ['@comment.error'] = { fg = colors.error },
    ['@comment.warning'] = { fg = colors.warning },
    ['@comment.todo'] = { fg = colors.bg, bg = colors.warning },
    ['@comment.note'] = { fg = colors.info },

    -- Constants
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { fg = colors.const${bold} },
    ['@constant.macro'] = { link = 'Macro' },

    -- Strings
    ['@string'] = { link = 'String' },
    ['@string.documentation'] = { fg = colors.string${italic} },
    ['@string.regex'] = { fg = colors.warning },
    ['@string.escape'] = { fg = colors.base },
    ['@string.special'] = { fg = colors.base },
    ['@string.special.symbol'] = { fg = colors.const },
    ['@string.special.url'] = { fg = colors.info, underline = true },

    -- Characters & Numbers
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@number'] = { link = 'Number' },
    ['@number.float'] = { link = 'Float' },
    ['@boolean'] = { link = 'Boolean' },

    -- Functions
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { fg = colors.builtin${fbold} },
    ['@function.call'] = { fg = colors.func },
    ['@function.macro'] = { link = 'Macro' },
    ['@function.method'] = { fg = colors.func },
    ['@function.method.call'] = { fg = colors.func },

    -- Constructors
    ['@constructor'] = { fg = colors.type${bold} },

    -- Keywords
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.repeat'] = { link = 'Repeat' },
    ['@keyword.return'] = { fg = colors.keyword${bold} },
    ['@keyword.function'] = { fg = colors.keyword${bold} },
    ['@keyword.operator'] = { fg = colors.operator },
    ['@keyword.import'] = { link = 'Include' },
    ['@keyword.exception'] = { link = 'Exception' },
    ['@keyword.directive'] = { link = 'PreProc' },
    ['@keyword.directive.define'] = { link = 'Define' },

    -- Operators
    ['@operator'] = { link = 'Operator' },

    -- Variables
    ['@variable'] = { fg = colors.variable },
    ['@variable.builtin'] = { fg = colors.builtin },
    ['@variable.parameter'] = { fg = colors.parameter },
    ['@variable.parameter.builtin'] = { fg = colors.builtin },
    ['@variable.member'] = { fg = colors.property },

    -- Types
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { fg = colors.builtin${bold} },
    ['@type.definition'] = { link = 'Typedef' },
    ['@type.qualifier'] = { link = 'Keyword' },

    -- Attributes & Properties
    ['@attribute'] = { fg = colors.base },
    ['@attribute.builtin'] = { fg = colors.builtin${bold} },
    ['@property'] = { fg = colors.property },
    ['@field'] = { fg = colors.property },

    -- Modules & Namespaces
    ['@module'] = { fg = colors.namespace },
    ['@module.builtin'] = { fg = colors.builtin${bold} },
    ['@label'] = { link = 'Label' },

    -- Punctuation
    ['@punctuation.delimiter'] = { fg = colors.punctuation },
    ['@punctuation.bracket'] = { fg = colors.punctuation },
    ['@punctuation.special'] = { fg = colors.punctuation },

    -- Tags (HTML/XML/JSX)
    ['@tag'] = { fg = colors.tag },
    ['@tag.builtin'] = { fg = colors.builtin${bold} },
    ['@tag.attribute'] = { fg = colors.property },
    ['@tag.delimiter'] = { fg = colors.punctuation },

    -- Markup (Markdown, etc.)
    ['@markup.strong'] = { bold = true },
    ['@markup.italic'] = { italic = true },
    ['@markup.strikethrough'] = { strikethrough = true },
    ['@markup.underline'] = { underline = true },

    ['@markup.heading'] = { fg = colors.heading${bold} },
    ['@markup.heading.1'] = { fg = colors.heading${bold} },
    ['@markup.heading.2'] = { fg = colors.heading${bold} },
    ['@markup.heading.3'] = { fg = colors.heading${bold} },
    ['@markup.heading.4'] = { fg = colors.heading${bold} },
    ['@markup.heading.5'] = { fg = colors.heading${bold} },
    ['@markup.heading.6'] = { fg = colors.heading${bold} },

    ['@markup.quote'] = { fg = colors.comment${italic} },
    ['@markup.math'] = { fg = colors.number },

    ['@markup.link'] = { fg = colors.info, underline = true },
    ['@markup.link.label'] = { fg = colors.string },
    ['@markup.link.url'] = { fg = colors.info, underline = true },

    ['@markup.raw'] = { fg = colors.string },
    ['@markup.raw.block'] = { fg = colors.string },

    ['@markup.list'] = { fg = colors.base },
    ['@markup.list.checked'] = { fg = colors.success },
    ['@markup.list.unchecked'] = { fg = colors.comment },

    -- Diffs
    ['@diff.plus'] = { fg = colors.success },
    ['@diff.minus'] = { fg = colors.error },
    ['@diff.delta'] = { fg = colors.warning },

    -- ============================================================================
    -- GIT INTEGRATION
    -- ============================================================================
    DiffAdd = { fg = colors.success },
    DiffChange = { fg = colors.warning },
    DiffDelete = { fg = colors.error },
    DiffText = { fg = colors.info, bg = colors.bg_alt },

    -- gitsigns.nvim
    GitSignsAdd = { fg = colors.success },
    GitSignsChange = { fg = colors.warning },
    GitSignsDelete = { fg = colors.error },
    GitSignsAddNr = { fg = colors.success },
    GitSignsChangeNr = { fg = colors.warning },
    GitSignsDeleteNr = { fg = colors.error },
    GitSignsAddLn = { bg = colors.success, fg = colors.bg },
    GitSignsChangeLn = { bg = colors.warning, fg = colors.bg },
    GitSignsDeleteLn = { bg = colors.error, fg = colors.bg },
    GitSignsCurrentLineBlame = { fg = colors.comment${italic} },

    -- ============================================================================
    -- PLUGIN SUPPORT
    -- ============================================================================

    -- Telescope.nvim
    TelescopeBorder = { fg = colors.base, bg = colors.bg_alt },
    TelescopeNormal = { fg = colors.fg, bg = colors.bg_alt },
    TelescopePromptNormal = { fg = colors.fg, bg = colors.bg_alt },
    TelescopeResultsNormal = { fg = colors.fg, bg = colors.bg_alt },
    TelescopePreviewNormal = { fg = colors.fg, bg = colors.bg_alt },
    TelescopeSelection = { fg = colors.bg, bg = colors.base },
    TelescopeSelectionCaret = { fg = colors.base },
    TelescopeMatching = { fg = colors.warning${bold} },
    TelescopePromptPrefix = { fg = colors.base },

    -- nvim-cmp
    CmpItemAbbrDeprecated = { fg = colors.comment, strikethrough = true },
    CmpItemAbbrMatch = { fg = colors.base${bold} },
    CmpItemAbbrMatchFuzzy = { fg = colors.base },
    CmpItemKindVariable = { fg = colors.variable },
    CmpItemKindInterface = { fg = colors.type },
    CmpItemKindText = { fg = colors.fg },
    CmpItemKindFunction = { fg = colors.func },
    CmpItemKindMethod = { fg = colors.func },
    CmpItemKindKeyword = { fg = colors.keyword },
    CmpItemKindProperty = { fg = colors.variable },
    CmpItemKindUnit = { fg = colors.number },
    CmpItemKindClass = { fg = colors.type },
    CmpItemKindModule = { fg = colors.type },
    CmpItemKindConstant = { fg = colors.const },
    CmpItemKindEnum = { fg = colors.type },
    CmpItemKindStruct = { fg = colors.type },
    CmpItemKindEvent = { fg = colors.base },
    CmpItemKindOperator = { fg = colors.operator },
    CmpItemKindTypeParameter = { fg = colors.type },

    -- nvim-tree / neo-tree
    NvimTreeNormal = { fg = colors.fg, bg = colors.bg_alt },
    NvimTreeFolderName = { fg = colors.info },
    NvimTreeFolderIcon = { fg = colors.info },
    NvimTreeOpenedFolderName = { fg = colors.base },
    NvimTreeRootFolder = { fg = colors.base${bold} },
    NvimTreeSpecialFile = { fg = colors.warning },
    NvimTreeGitDirty = { fg = colors.warning },
    NvimTreeGitNew = { fg = colors.success },
    NvimTreeGitDeleted = { fg = colors.error },

    NeoTreeNormal = { fg = colors.fg, bg = colors.bg_alt },
    NeoTreeDirectoryName = { fg = colors.info },
    NeoTreeDirectoryIcon = { fg = colors.info },
    NeoTreeRootName = { fg = colors.base${bold} },
    NeoTreeFileName = { fg = colors.fg },
    NeoTreeFileIcon = { fg = colors.fg },
    NeoTreeGitAdded = { fg = colors.success },
    NeoTreeGitModified = { fg = colors.warning },
    NeoTreeGitDeleted = { fg = colors.error },

    -- Which-key
    WhichKey = { fg = colors.base },
    WhichKeyGroup = { fg = colors.keyword },
    WhichKeyDesc = { fg = colors.fg },
    WhichKeySeparator = { fg = colors.comment },
    WhichKeyFloat = { bg = colors.bg_alt },
    WhichKeyValue = { fg = colors.string },

    -- Indent Blankline
    IblIndent = { fg = colors.bg_alt },
    IblScope = { fg = colors.comment },

    -- Dashboard / Alpha
    DashboardHeader = { fg = colors.base },
    DashboardCenter = { fg = colors.keyword },
    DashboardShortcut = { fg = colors.warning },
    DashboardFooter = { fg = colors.comment${italic} },
  }

  for group, opts in pairs(highlights) do
    vim.api.nvim_set_hl(0, group, opts)
  end
end

M.setup()

return M
`

  return {
    filename: `${themeName}.lua`,
    content,
    format: 'neovim',
  }
}
